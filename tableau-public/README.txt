Tableau Public Connector
========================

This mini application manages Tableau Public visualizations and allows them to be
embedded in multiple forms inside pages generated by a web content management system (CMS)
such as Webit.  The location of each visualization is managed within the application
and uses an ID to redirect from the CMS, allowing the content owner to fully change 
the visualizations as needed without needing to update the CMS pages.

To update the database
----------------------

1. Edit the file viz.csv to add any new visualizations that may be available on tableau public

2. Deploy the database to production using the command
   
     $> ant updateDb

The list of available visualizations then appears on 

http://apps.who.int/gho/tableau-public/

and provides HTML snippets that can be inserted into the CMS

WARNING 1:
YOU MUST DEPLOY TO AND USE THE LINKS FROM THE PRODUCTION VERSION OF THIS APPLICATION
ON http://apps.who.int/gho/tableau-public .
IF YOU DO NOT DO THIS, THE LINKS WILL NOT WORK FOR USERS OUTSIDE OF WHO

WARNING 2:
THIS REGENERATES THE DATABASE, DO NOT DELETE ENTRIES UNLESS YOU KNOW FOR CERTAIN THAT
THEY ARE NO LONGER REFERENCED BY WEBIT OR OTHER PAGES.  ON THE FLIP SIDE, IF YOU WISH A
VISUALIZATION TO DISAPPEAR COMPLETELY SNUFFING OUT ITS ENTRY HERE IS A QUICK AND DIRTY
WAY TO FORCE THAT.

WARNING 3:
YOU MUST UPDATE THE PASSWORD IN THE FTPCMDS FILE - DO NOT CHECK THIS FILE BACK IN WITH 
THE PASSWORD PLEASE


Building the application
------------------------

For this application to work correctly you must have sqlite installed on your computer
to allow the build file to convert the CSV file of visualizations to a small database.

To build and deploy the application on the staging server (devlin)

1. Edit the file viz.csv to add any new visualizations that may be available on tableau public

2. Build and deploy the application using the command

     $> ant deploy

Note that if it has not already been done, for the application to run correctly, 
you must copy the sqlite JDBC driver in this project's lib directory to the lib 
directory of the host tomcat server




Format of the CSV seed file
---------------------------

The file consists of 5 columns:

id:               An integer that will act as the reference identifier for 
                  the visualization.  This can be assigned any way you wish as long as
                  each visualization entry has its own unique number.  This value appears
                  in the id parameter of the various URLS that can be generated by this 
                  application

type:             The type of embedded object - there are currently two types supported:
		  tp  Tableau Public visualizations (From Tableau's free public server)
		  ia  Instant Atlas Maps (From WHO's gamapserver.who.int host)

title             A string containing a title header for the visualization.  If and how
                  this is displayed depends on the specific embedding type you choose to
                  use.
    
name              The tableau public name for the visualization - you must usually pull 
                  this out from Tableau's own generated embedding code or from the 
                  reference URL generated by tableau public. For Instant atlas visualizations,
                  use the folder name followed by the primary index file, for example:
		  mdg1/atlas.html

height            The height of the visualization in pixels

width:            The width of the visualization in pixels.  Note that height and width in
                  this context define the size of the bounding box for the visualization
                  so it can be bigger than the viz itself.

Example:

Tableau Public Visualization:

id,type,title,name,height,width
1,tp,"SDG Target 3.1 | Maternal mortality",SDGTarget3_1_1nostory/Situation,675,982

Instant Atlas Map:

id,type,title,name,height,width
500,ia,Child malnutrition | Prevalence of stunting in children aged less than 5 years,mdg1/atlas.html,1000,700

